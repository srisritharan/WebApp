node {
    // Get Artifactory server instance, defined in the Artifactory Plugin administration page.
    def server = Artifactory.server "artifactory"
    // Create an Artifactory Maven instance.
    def rtMaven = Artifactory.newMavenBuild()
    def buildInfo 
    rtMaven.tool = "maven"
 
//  
  stage('Artifactory configuration') {
        // Tool name from Jenkins configuration
        rtMaven.tool = "maven"
        // Set Artifactory repositories for dependencies resolution and artifacts deployment.
        rtMaven.deployer releaseRepo:'libs-release-local', snapshotRepo:'libs-snapshot-local', server: server
        rtMaven.resolver releaseRepo:'libs-release', snapshotRepo:'libs-snapshot', server: server
    }
//    
    stage('Clone sources') {
        git url: 'https://github.com/srisritharan/WebApp.git'
    }
//    
    stage('SonarQube analysis') {
       //withSonarQubeEnv(credentialsId: 'sonar-test', installationName: 'sonarqube') { // You can override the credential to be used
       // sh 'mvn clean package sonar:sonar'
       	 withSonarQubeEnv('sonarqube') { // You can override the credential to be used
       	 	sh 'mvn clean package sonar:sonar -Dsonar.host.url=http://35.224.54.238// -Dsonar.credentialsId=sonar-test -Dsonar.sources=. -Dsonar.tests=. -Dsonar.test.inclusions=**/test/java/servlet/createpage_junit.java -Dsonar.exclusions=**/test/java/servlet/createpage_junit.java'
              }
    	}
    }
//    
    stage('Maven build') {
        buildInfo = rtMaven.run pom: 'pom.xml', goals: 'clean install'
	slackSend channel: 'project-dcs', message: 'started ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)', tokenCredentialId: 'slack'
	jiraComment body: 'Build sucess', issueKey: 'DCS-1'
    }
//
    stage('Deploy') {
	      deploy adapters: [tomcat7(credentialsId: 'gcptomcat', path: '', url: 'http://104.198.41.127:8080/')], contextPath: '/QAWebapp', war: '**/*.war'
         }
//
    stage('Publish build info') {
        server.publishBuildInfo buildInfo
       }
//	
    }
